pragma solidity >=0.7.0 <0.9.0;
import "hardhat/console.sol";
contract Owner {
    address private owner; //variable for owner's address
    event OwnerSet(address indexed oldOwner, address indexed newOwner); // event for EVM logging

    modifier isOwner() { // modifier to check if caller is owner
        require(msg.sender == owner, "Caller is not owner");
        _;
    }

    constructor() { //Set contract deployer as owner
        console.log("Owner contract deployed by:", msg.sender);
        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor
        emit OwnerSet(address(0), owner);
    }

    function changeOwner(address newOwner) public isOwner { //Change owner by address of new owner
        require(newOwner != address(0), "New owner should not be the zero address");
        emit OwnerSet(owner, newOwner);
        owner = newOwner;
    }

    function getOwner() external view returns (address) { // address of owner
        return owner;
    }
} 
